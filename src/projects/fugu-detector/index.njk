---
eleventyExcludeFromCollections: true
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="./style.css">
        <title>Fugu Detector</title>
    </head>
    <body>
        <h1 class="title">Project Fugu Detector</h1>
        <p class="description">The page shows which Project Fugu APIs are available in your browser.</p>
        <ul class="container">
            {%- for item in fuguDetector -%}
                <li class="card" id="{{ item.id }}">
                    <h2 class="card__title">{{ item.title }}</h2>
                    <span class="card__status"></span>
                    {% if item.summary %}
                        <p class="card__description">{{ item.summary }}</p>
                    {% endif %}
                    <p class="card__bug">
                        <span class="card__emoji">üõ†</span>Chromium Bug:
                        <a href="https://bugs.chromium.org/p/chromium/issues/detail?id={{ item.id }}">{{ item.id }}</a>
                    </p>
                    {% if item.spec %}
                        <p class="card__spec">
                            <span class="card__emoji">üåê</span>Specification:
                            <a href="{{ item.spec.url }}">{{ item.spec.origin }}</a>
                        </p>
                    {% endif %}
                    {% if item.explainers.length %}
                        <p class="card__explainers">
                            <span class="card__emoji">üìñ</span>Explainers:
                            <ul>
                                {%- for explainer in item.explainers -%}
                                    <li>
                                        <a href="{{ explainer.url }}">{{ explainer.origin }}</a>
                                    </li>
                                {%- endfor -%}
                            </ul>
                        </p>
                    {% endif %}
                    {% if item.docs.length %}
                        <p class="card__docs">
                            <span class="card__emoji">üìï</span>Docs:
                            <ul>
                                {%- for doc in item.docs -%}
                                    <li>
                                        <a href="{{ doc.url }}">{{ doc.origin }}</a>
                                    </li>
                                {%- endfor -%}
                            </ul>
                        </p>
                    {% endif %}
                    {% if item.demos.length %}
                        <p class="card__demos">
                            <span class="card__emoji">üé≤</span>Demos:
                            <ul>
                                {%- for demo in item.demos -%}
                                    <li>
                                        <a href="{{ demo.url }}">{{ demo.origin }}</a>
                                    </li>
                                {%- endfor -%}
                            </ul>
                        </p>
                    {% endif %}
                </li>
            {%- endfor -%}
        </ul>
        <script>
            (async () => {
                const featureDetectionMap = {
                    419413: {
                        name: 'Web Bluetooth API',
                        supported: async () => 'bluetooth' in navigator
                    },
                    492204: {
                        name: 'WebUSB API',
                        supported: async () => 'usb' in navigator
                    },
                    903010: {
                        name: 'Web Share API Level 2',
                        supported: async () => 'canShare' in navigator
                    },
                    150835: {
                        name: 'Async Clipboard: Read and Write Images',
                        supported: async () => 'clipboard' in navigator && 'write' in navigator.clipboard
                    },
                    895854: {
                        name: 'Get Installed Related Apps API',
                        supported: async () => 'getInstalledRelatedApps' in navigator
                    },
                    925297: {
                        name: 'Periodic Background Sync',
                        supported: async () => 'PeriodicSyncManager' in self
                    },
                    897298: {
                        name: 'Compression codecs',
                        supported: async () => 'CompressionStream' in self
                    },
                    860467: {
                        name: 'Contacts API',
                        supported: async () => 'contacts' in navigator
                    },
                    719176: {
                        name: 'Badging API',
                        supported: async () => 'setAppBadge' in navigator
                    },
                    897312: {
                        name: 'Web Bluetooth Scanning',
                        supported: async () => 'bluetooth' in navigator && 'requestLEScan' in navigator.bluetooth
                    },
                    897309: {
                        name: 'EyeDropper API',
                        supported: async () => 'EyeDropper' in self
                    }
                };
                const cards = document.querySelectorAll('.card');
                Array.from(cards).forEach(async (card) => {
                    const id = Number(card.id);
                    if (! id)
                        return;

                    const feature = featureDetectionMap[id];
                    if (! feature) {
                        setStatus(card, 'Unknown');
                        return;
                    }
                    try {
                        const isSupported = await feature.supported();
                        if (isSupported) {
                            setStatus(card, 'Yes');
                            card.classList.add('card--success');
                        } else {
                            setStatus(card, 'No');
                            card.classList.add('card--fail');
                        }
                    } catch (e) {
                        setStatus(card, 'Unknown');
                    }
                });
                function setStatus(card, status) {
                    card.querySelector('.card__status').innerHTML = status;
                }
            })();
        </script>
    </body>
</html>
